@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@page "/quizzes/details"
@inject ComputingProjectBlazorIdentity.Data.ApplicationDbContext DB
@using ComputingProjectBlazorIdentity.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Quiz</h4>
    <hr />
    @if (quiz is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Question</dt>
            <dd class="col-sm-10">@quiz.Question</dd>
            <dt class="col-sm-2">Answer1</dt>
            <dd class="col-sm-10">@quiz.Answer1</dd>
            <dt class="col-sm-2">Answer2</dt>
            <dd class="col-sm-10">@quiz.Answer2</dd>
            <dt class="col-sm-2">Answer3</dt>
            <dd class="col-sm-10">@quiz.Answer3</dd>
            <dt class="col-sm-2">Answer4</dt>
            <dd class="col-sm-10">@quiz.Answer4</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@quiz.Description</dd>
        </dl>
        <div>
            <a href="@($"/quizzes/edit?id={quiz.Id}")">Edit</a> |
            <a href="@($"/quizzes")">Back to List</a>
        </div>
    }
</div>

@code {
    Quiz? quiz;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        quiz = await DB.Quiz.FirstOrDefaultAsync(m => m.Id == Id);

        if (quiz is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
